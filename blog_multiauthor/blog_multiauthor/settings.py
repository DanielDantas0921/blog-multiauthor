"""
Django settings for blog_multiauthor project.

Generated by 'django-admin startproject' using Django 3.2.24.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z35!=bp6ufs#y26zjn08(6yc!=q0th@ef0%@&97jzuod9@$iq!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_summernote',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'blogApp'
]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
     'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'blog_multiauthor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'allauth.account.context_processors.account',  # Certifique-se de incluir isso
                # 'allauth.socialaccount.context_processors.socialaccount',  # Para login social
            ],
        },
    },
]

WSGI_APPLICATION = 'blog_multiauthor.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'  # URL pública para acessar os arquivos
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Caminho absoluto na máquina
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# X_FRAME_OPTIONS = 'SAMEORIGIN'
X_FRAME_OPTIONS = 'SAMEORIGIN'
# SECURE_CONTENT_TYPE_NOSNIFF = False
SUMMERNOTE_CONFIG = {
    # 'iframe': {'width': '640', 'height': '360'}, 
     'iframe': True, # Configuração do vídeo
    'file_picker': True,
    'image_path': 'uploads/images/',  # Caminho para as imagens
    'upload_to': 'uploads/',    # Se realmente precisar desativar
    'codemirror': {
        'mode': 'htmlmixed',
        'lineNumbers': True,
    },
    'summernote': {
        'toolbar': [
            ['style', ['style']],
            ['font', ['bold', 'italic', 'underline']],
            ['insert', ['link', 'picture', 'video']],
            ['view', ['fullscreen', 'codeview']],
        ],
        
    },
}


# Definindo os estilos CSS permitidos

from bleach.css_sanitizer import CSSSanitizer
from bleach import Cleaner

# Defina propriedades CSS permitidas
ALLOWED_CSS_PROPERTIES = [
    "width", "height", "max-width", "max-height",
    "border", "margin", "padding", "float", "display"
]

# Crie o sanitizador CSS
css_sanitizer = CSSSanitizer(
    allowed_css_properties=ALLOWED_CSS_PROPERTIES
)


ALLOWED_TAGS = [
    "a", "b", "i", "u", "strong", "em", "p", "h1", "h2", "h3", 
    "ul", "ol", "li", "br", "hr", "blockquote", "pre", "code",
    "img", "video", "source"
]

ATTRIBUTES = {
    "*": ["class", "id", "style", "title"],
    "a": ["href", "rel", "target"],
    "img": ["src", "alt", "width", "height"],
    "video": ["src", "width", "height", "controls", "autoplay"],
    "source": ["src", "type"]
}

cleaner = Cleaner(
    tags=ALLOWED_TAGS,
    attributes=ATTRIBUTES,
    css_sanitizer=css_sanitizer
)


AUTHENTICATION_BACKENDS = [
    
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
    
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'OAUTH_PKCE_ENABLED': True,
    }
    #  "google": {
    #     # For each OAuth based provider, either add a ``SocialApp``
    #     # (``socialaccount`` app) containing the required client
    #     # credentials, or list them here:
    #     "APPS": [
    #         {
    #             "client_id": "126886693978-demt3e6ic4jq8nmburllormgi0qa0plc.apps.googleusercontent.com",
    #             "secret": "126886693978-demt3e6ic4jq8nmburllormgi0qa0plc.apps.googleusercontent.com",
    #             "key": "",
    #             "settings": {
    #                 # You can fine tune these settings per app:
    #                 "scope": [
    #                     "profile",
    #                     "email",
    #                 ],
    #                 "auth_params": {
    #                     "access_type": "online",
    #                 },
    #             },
    #         },
    #     ],
    #     # The following provider-specific settings will be used for all apps:
    #     "SCOPE": [
    #         "profile",
    #         "email",
    #     ],
    #     "AUTH_PARAMS": {
    #         "access_type": "online",
    #     },
    # }
}

EMAIL_BACKEND = 'django.core.backends.console.EmailBackend'



SITE_ID = 2

LOGIN_REDIRECT_URL = '/'  # Redireciona para a home após login
LOGOUT_REDIRECT_URL = '/'  # Redireciona para a home após logout
ACCOUNT_LOGOUT_REDIRECT_URL = '/accounts/login/' 

# Configurações de e-mail e verificação
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "optional"  # "none", "optional", ou "mandatory"

# Permitir login social com email
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_STORE_TOKENS = True